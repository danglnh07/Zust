// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const activateAccount = `-- name: ActivateAccount :exec
UPDATE account
SET status = 'active'
WHERE account_id = $1
`

func (q *Queries) ActivateAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, activateAccount, accountID)
	return err
}

const createAccountWithOAuth = `-- name: CreateAccountWithOAuth :one
INSERT INTO account (email, username, status, oauth_provider, oauth_provider_id)
VALUES ($1, $2, 'active', $3, $4)
RETURNING account_id, email, username, password, description, status, oauth_provider, oauth_provider_id, token_version
`

type CreateAccountWithOAuthParams struct {
	Email           string         `json:"email"`
	Username        string         `json:"username"`
	OauthProvider   sql.NullString `json:"oauth_provider"`
	OauthProviderID sql.NullString `json:"oauth_provider_id"`
}

func (q *Queries) CreateAccountWithOAuth(ctx context.Context, arg CreateAccountWithOAuthParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccountWithOAuth,
		arg.Email,
		arg.Username,
		arg.OauthProvider,
		arg.OauthProviderID,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Description,
		&i.Status,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.TokenVersion,
	)
	return i, err
}

const createAccountWithPassword = `-- name: CreateAccountWithPassword :one
INSERT INTO account (email, username, password)
VALUES ($1, $2, $3)
RETURNING account_id, email, username, password, description, status, oauth_provider, oauth_provider_id, token_version
`

type CreateAccountWithPasswordParams struct {
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) CreateAccountWithPassword(ctx context.Context, arg CreateAccountWithPasswordParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccountWithPassword, arg.Email, arg.Username, arg.Password)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Description,
		&i.Status,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.TokenVersion,
	)
	return i, err
}

const editProfile = `-- name: EditProfile :one
UPDATE account
SET username = $2, description = $3
WHERE account_id = $1
RETURNING account_id, email, username, description, status
`

type EditProfileParams struct {
	AccountID   uuid.UUID      `json:"account_id"`
	Username    string         `json:"username"`
	Description sql.NullString `json:"description"`
}

type EditProfileRow struct {
	AccountID   uuid.UUID      `json:"account_id"`
	Email       string         `json:"email"`
	Username    string         `json:"username"`
	Description sql.NullString `json:"description"`
	Status      AccountStatus  `json:"status"`
}

func (q *Queries) EditProfile(ctx context.Context, arg EditProfileParams) (EditProfileRow, error) {
	row := q.db.QueryRowContext(ctx, editProfile, arg.AccountID, arg.Username, arg.Description)
	var i EditProfileRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT account_id, email, username, password, description, status, token_version FROM account
WHERE email = $1
`

type GetAccountByEmailRow struct {
	AccountID    uuid.UUID      `json:"account_id"`
	Email        string         `json:"email"`
	Username     string         `json:"username"`
	Password     sql.NullString `json:"password"`
	Description  sql.NullString `json:"description"`
	Status       AccountStatus  `json:"status"`
	TokenVersion int32          `json:"token_version"`
}

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (GetAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i GetAccountByEmailRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Description,
		&i.Status,
		&i.TokenVersion,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT account_id, email, username, password, description, status, token_version FROM account
WHERE username = $1
`

type GetAccountByUsernameRow struct {
	AccountID    uuid.UUID      `json:"account_id"`
	Email        string         `json:"email"`
	Username     string         `json:"username"`
	Password     sql.NullString `json:"password"`
	Description  sql.NullString `json:"description"`
	Status       AccountStatus  `json:"status"`
	TokenVersion int32          `json:"token_version"`
}

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (GetAccountByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i GetAccountByUsernameRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Description,
		&i.Status,
		&i.TokenVersion,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT account_id, email, username, description, status FROM account
WHERE account_id = $1
`

type GetProfileRow struct {
	AccountID   uuid.UUID      `json:"account_id"`
	Email       string         `json:"email"`
	Username    string         `json:"username"`
	Description sql.NullString `json:"description"`
	Status      AccountStatus  `json:"status"`
}

func (q *Queries) GetProfile(ctx context.Context, accountID uuid.UUID) (GetProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getProfile, accountID)
	var i GetProfileRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const getTokenVersion = `-- name: GetTokenVersion :one
SELECT token_version FROM account
WHERE account_id = $1
`

func (q *Queries) GetTokenVersion(ctx context.Context, accountID uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTokenVersion, accountID)
	var token_version int32
	err := row.Scan(&token_version)
	return token_version, err
}

const incrementTokenVersion = `-- name: IncrementTokenVersion :exec
UPDATE account
SET token_version = token_version + 1
WHERE account_id = $1
`

func (q *Queries) IncrementTokenVersion(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementTokenVersion, accountID)
	return err
}

const isAccountRegistered = `-- name: IsAccountRegistered :one
SELECT EXISTS (
    SELECT 1 FROM account WHERE oauth_provider = $1 AND oauth_provider_id = $2
)
`

type IsAccountRegisteredParams struct {
	OauthProvider   sql.NullString `json:"oauth_provider"`
	OauthProviderID sql.NullString `json:"oauth_provider_id"`
}

func (q *Queries) IsAccountRegistered(ctx context.Context, arg IsAccountRegisteredParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isAccountRegistered, arg.OauthProvider, arg.OauthProviderID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const lockAccount = `-- name: LockAccount :exec
UPDATE account
SET status = 'locked'
WHERE account_id = $1
`

func (q *Queries) LockAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, lockAccount, accountID)
	return err
}

const loginWithOAuth = `-- name: LoginWithOAuth :one
SELECT account_id, email, username, description, status, token_version FROM account
WHERE oauth_provider = $1 AND oauth_provider_id = $2
`

type LoginWithOAuthParams struct {
	OauthProvider   sql.NullString `json:"oauth_provider"`
	OauthProviderID sql.NullString `json:"oauth_provider_id"`
}

type LoginWithOAuthRow struct {
	AccountID    uuid.UUID      `json:"account_id"`
	Email        string         `json:"email"`
	Username     string         `json:"username"`
	Description  sql.NullString `json:"description"`
	Status       AccountStatus  `json:"status"`
	TokenVersion int32          `json:"token_version"`
}

func (q *Queries) LoginWithOAuth(ctx context.Context, arg LoginWithOAuthParams) (LoginWithOAuthRow, error) {
	row := q.db.QueryRowContext(ctx, loginWithOAuth, arg.OauthProvider, arg.OauthProviderID)
	var i LoginWithOAuthRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Description,
		&i.Status,
		&i.TokenVersion,
	)
	return i, err
}

const subscribe = `-- name: Subscribe :one
INSERT INTO subscribe (subscriber_id, subscribe_to_id)
VALUES ($1, $2)
RETURNING subscriber_id, subscribe_to_id, subscribe_at
`

type SubscribeParams struct {
	SubscriberID  uuid.UUID `json:"subscriber_id"`
	SubscribeToID uuid.UUID `json:"subscribe_to_id"`
}

func (q *Queries) Subscribe(ctx context.Context, arg SubscribeParams) (Subscribe, error) {
	row := q.db.QueryRowContext(ctx, subscribe, arg.SubscriberID, arg.SubscribeToID)
	var i Subscribe
	err := row.Scan(&i.SubscriberID, &i.SubscribeToID, &i.SubscribeAt)
	return i, err
}

const unlockAccount = `-- name: UnlockAccount :exec
UPDATE account
SET status = 'active'
WHERE account_id = $1
`

func (q *Queries) UnlockAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unlockAccount, accountID)
	return err
}

const unsubscribe = `-- name: Unsubscribe :exec
DELETE FROM subscribe
WHERE subscriber_id = $1 AND subscribe_to_id = $2
`

type UnsubscribeParams struct {
	SubscriberID  uuid.UUID `json:"subscriber_id"`
	SubscribeToID uuid.UUID `json:"subscribe_to_id"`
}

func (q *Queries) Unsubscribe(ctx context.Context, arg UnsubscribeParams) error {
	_, err := q.db.ExecContext(ctx, unsubscribe, arg.SubscriberID, arg.SubscribeToID)
	return err
}
