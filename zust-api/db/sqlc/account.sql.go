// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccountWithPassword = `-- name: CreateAccountWithPassword :one
 INSERT INTO account (email, username, password)
 VALUES ($1, $2, $3)
 RETURNING account_id, email, username, password, avatar, cover, description, status, oauth_provider, oauth_provider_id, token_version
`

type CreateAccountWithPasswordParams struct {
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) CreateAccountWithPassword(ctx context.Context, arg CreateAccountWithPasswordParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccountWithPassword, arg.Email, arg.Username, arg.Password)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Avatar,
		&i.Cover,
		&i.Description,
		&i.Status,
		&i.OauthProvider,
		&i.OauthProviderID,
		&i.TokenVersion,
	)
	return i, err
}

const loginWithOAuth = `-- name: LoginWithOAuth :one
SELECT account_id, email, username, avatar, cover, description, token_version FROM account
WHERE oauth_provider = $1 AND oauth_provider_id = $2
`

type LoginWithOAuthParams struct {
	OauthProvider   sql.NullString `json:"oauth_provider"`
	OauthProviderID sql.NullString `json:"oauth_provider_id"`
}

type LoginWithOAuthRow struct {
	AccountID    uuid.UUID      `json:"account_id"`
	Email        string         `json:"email"`
	Username     string         `json:"username"`
	Avatar       string         `json:"avatar"`
	Cover        string         `json:"cover"`
	Description  sql.NullString `json:"description"`
	TokenVersion int32          `json:"token_version"`
}

func (q *Queries) LoginWithOAuth(ctx context.Context, arg LoginWithOAuthParams) (LoginWithOAuthRow, error) {
	row := q.db.QueryRowContext(ctx, loginWithOAuth, arg.OauthProvider, arg.OauthProviderID)
	var i LoginWithOAuthRow
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Cover,
		&i.Description,
		&i.TokenVersion,
	)
	return i, err
}
