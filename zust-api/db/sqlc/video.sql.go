// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: video.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO video (title, duration, description, publisher_id)
VALUES ($1, $2, $3, $4)
RETURNING video_id, title, duration, description, created_at, updated_at, publisher_id, status
`

type CreateVideoParams struct {
	Title       string         `json:"title"`
	Duration    int32          `json:"duration"`
	Description sql.NullString `json:"description"`
	PublisherID uuid.UUID      `json:"publisher_id"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.Title,
		arg.Duration,
		arg.Description,
		arg.PublisherID,
	)
	var i Video
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublisherID,
		&i.Status,
	)
	return i, err
}

const getVideo = `-- name: GetVideo :one
SELECT 
    v.video_id, v.title, v.duration, v.description, v.created_at,
    a.account_id, a.username,
    (SELECT COUNT(*) FROM subscribe s WHERE s.subscribe_to_id = v.publisher_id) AS total_subscriber,
    (SELECT COUNT(*) FROM watch_video wv WHERE wv.video_id = v.video_id) AS total_view,
    (SELECT COUNT(*) FROM like_video lv WHERE lv.video_id = v.video_id) AS total_like
FROM video v 
JOIN account a ON a.account_id = v.publisher_id
WHERE v.video_id = $1
`

type GetVideoRow struct {
	VideoID         uuid.UUID      `json:"video_id"`
	Title           string         `json:"title"`
	Duration        int32          `json:"duration"`
	Description     sql.NullString `json:"description"`
	CreatedAt       time.Time      `json:"created_at"`
	AccountID       uuid.UUID      `json:"account_id"`
	Username        string         `json:"username"`
	TotalSubscriber int64          `json:"total_subscriber"`
	TotalView       int64          `json:"total_view"`
	TotalLike       int64          `json:"total_like"`
}

func (q *Queries) GetVideo(ctx context.Context, videoID uuid.UUID) (GetVideoRow, error) {
	row := q.db.QueryRowContext(ctx, getVideo, videoID)
	var i GetVideoRow
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.AccountID,
		&i.Username,
		&i.TotalSubscriber,
		&i.TotalView,
		&i.TotalLike,
	)
	return i, err
}
