// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type AccountStatus string

const (
	AccountStatusInactive AccountStatus = "inactive"
	AccountStatusActive   AccountStatus = "active"
	AccountStatusBanned   AccountStatus = "banned"
	AccountStatusLocked   AccountStatus = "locked"
)

func (e *AccountStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountStatus(s)
	case string:
		*e = AccountStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountStatus: %T", src)
	}
	return nil
}

type NullAccountStatus struct {
	AccountStatus AccountStatus `json:"account_status"`
	Valid         bool          `json:"valid"` // Valid is true if AccountStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountStatus), nil
}

type Account struct {
	AccountID       uuid.UUID      `json:"account_id"`
	Email           string         `json:"email"`
	Username        string         `json:"username"`
	Password        sql.NullString `json:"password"`
	Description     sql.NullString `json:"description"`
	Status          AccountStatus  `json:"status"`
	OauthProvider   sql.NullString `json:"oauth_provider"`
	OauthProviderID sql.NullString `json:"oauth_provider_id"`
	TokenVersion    int32          `json:"token_version"`
}
